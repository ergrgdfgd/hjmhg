st.cache_data.clear()
# streamlit_battleship_bot.py
import streamlit as st
import numpy as np

FIELD_SIZE = 10
SHIP_SIZES = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
LETTERS = ['–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ö']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'player_memory' not in st.session_state:
    st.session_state.player_memory = np.zeros((FIELD_SIZE, FIELD_SIZE), dtype=int)
    st.session_state.remaining_ships = SHIP_SIZES.copy()
    st.session_state.last_click = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
def update_player_shot(x, y, result):
    if result == 'miss':
        st.session_state.player_memory[x, y] = -1
    elif result == 'hit':
        st.session_state.player_memory[x, y] = 1
    elif result.startswith('sunk'):
        st.session_state.player_memory[x, y] = 1
        size = int(result.split('_')[1])
        if size in st.session_state.remaining_ships:
            st.session_state.remaining_ships.remove(size)

# –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
@st.cache_data

def build_heatmap(memory, ships):
    heatmap = np.zeros_like(memory)
    for ship_len in ships:
        for i in range(FIELD_SIZE):
            for j in range(FIELD_SIZE):
                if j + ship_len <= FIELD_SIZE and all(memory[i, j+k] == 0 for k in range(ship_len)):
                    for k in range(ship_len):
                        heatmap[i, j+k] += 1
                if i + ship_len <= FIELD_SIZE and all(memory[i+k, j] == 0 for k in range(ship_len)):
                    for k in range(ship_len):
                        heatmap[i+k, j] += 1
    return heatmap

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–ª—É—á—à–∏–µ —Ü–µ–ª–∏
def suggest_next_target():
    heatmap = build_heatmap(st.session_state.player_memory, st.session_state.remaining_ships)
    max_val = np.max(heatmap)
    targets = np.argwhere(heatmap == max_val)
    return targets, heatmap

st.title("–ú–æ—Ä—Å–∫–æ–π –ë–æ–π –ë–æ—Ç")
st.write("–ù–∞–∂–º–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª. –ü–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

selected_cell = None
cols = st.columns(FIELD_SIZE + 1)
cols[0].markdown("**#**")
for j in range(FIELD_SIZE):
    cols[j+1].markdown(f"**{LETTERS[j]}**")

for i in range(FIELD_SIZE):
    row = st.columns(FIELD_SIZE + 1)
    row[0].markdown(f"**{i+1}**")
    for j in range(FIELD_SIZE):
        label = f"{i},{j}"
        cell = st.session_state.player_memory[i, j]
        btn_color = '‚ö™'
        if cell == -1:
            btn_color = '‚ùå'
        elif cell == 1:
            btn_color = 'üî•'
        if row[j+1].button(btn_color, key=label):
            st.session_state.last_click = (i, j)

if st.session_state.last_click:
    i, j = st.session_state.last_click
    st.markdown(f"**–í—ã—Å—Ç—Ä–µ–ª –≤:** {i+1}{LETTERS[j]}")
    result = st.radio("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞:", ["miss", "hit"] + [f"sunk_{n}" for n in set(SHIP_SIZES)])
    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª"):
        update_player_shot(i, j, result)
        st.session_state.last_click = None

    st.divider()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
targets, heatmap = suggest_next_target()
st.subheader("–õ—É—á—à–∏–µ –≤—Ä–ø–∞–Ω–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞:")
for x, y in targets:
    st.markdown(f"- {x+1}{LETTERS[y]}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
st.subheader("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ (—á–µ–º –≤—ã—à–µ —Ü–∏—Ñ—Ä–∞ ‚Äî —Ç–µ–º –≤–µ—Ä–æ—è—Ç–Ω–µ–µ):")
heat_display = ""
for i in range(FIELD_SIZE):
    for j in range(FIELD_SIZE):
        if st.session_state.player_memory[i, j] != 0:
            heat_display += "‚¨õ"
        else:
            heat_display += f"{int(heatmap[i,j]):2d} "
    heat_display += "\n"
st.code(heat_display, language="text")
