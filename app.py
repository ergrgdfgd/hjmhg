import numpy as np

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
FIELD_SIZE = 10
SHIP_SIZES = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]

# === –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
player_memory = np.zeros((FIELD_SIZE, FIELD_SIZE), dtype=int)
remaining_ships = SHIP_SIZES.copy()

def update_player_shot(x, y, result):
    global player_memory, remaining_ships
    if result == 'miss':
        player_memory[x, y] = -1
    elif result == 'hit':
        player_memory[x, y] = 1
    elif result.startswith('sunk'):
        player_memory[x, y] = 1
        ship_size = int(result.split('_')[1])
        if ship_size in remaining_ships:
            remaining_ships.remove(ship_size)

def build_heatmap(memory, remaining_ship_sizes):
    heatmap = np.zeros_like(memory)
    for ship_len in remaining_ship_sizes:
        for i in range(FIELD_SIZE):
            for j in range(FIELD_SIZE):
                # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                if j + ship_len <= FIELD_SIZE and all(memory[i, j+k] == 0 for k in range(ship_len)):
                    for k in range(ship_len):
                        heatmap[i, j + k] += 1
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                if i + ship_len <= FIELD_SIZE and all(memory[i+k, j] == 0 for k in range(ship_len)):
                    for k in range(ship_len):
                        heatmap[i + k, j] += 1
    return heatmap

def suggest_next_target():
    heatmap = build_heatmap(player_memory, remaining_ships)
    max_val = np.max(heatmap)
    if max_val == 0:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫", heatmap
    targets = np.argwhere(heatmap == max_val)
    return targets.tolist(), heatmap

def print_board(board):
    print("    " + " ".join(str(i) for i in range(FIELD_SIZE)))
    for i in range(FIELD_SIZE):
        row = [f"{board[i, j]:2d}" for j in range(FIELD_SIZE)]
        print(f"{i:2d} | {' '.join(row)}")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
if __name__ == "__main__":
    print("=== –ú–æ—Ä—Å–∫–æ–π –±–æ–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ ===")
    print("–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: X Y —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–∏–º–µ—Ä: 3 4 hit –∏–ª–∏ 5 6 sunk_2 –∏–ª–∏ 1 1 miss)")
    print("–ö–æ–º–∞–Ω–¥–∞ 'exit' ‚Äî –≤—ã–π—Ç–∏\n")

    while True:
        try:
            user_input = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å—Ç—Ä–µ–ª –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ").strip().lower()
            if user_input == 'exit':
                break
            parts = user_input.split()
            if len(parts) != 3:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 3 4 hit")
                continue

            x, y = int(parts[0]), int(parts[1])
            if not (0 <= x < FIELD_SIZE and 0 <= y < FIELD_SIZE):
                print("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –ø–æ–ª—è.")
                continue

            result = parts[2]
            if result not in ['miss', 'hit'] and not result.startswith('sunk_'):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π miss, hit –∏–ª–∏ sunk_N (–Ω–∞–ø—Ä–∏–º–µ—Ä, sunk_3)")
                continue

            update_player_shot(x, y, result)
            next_targets, heatmap = suggest_next_target()

            print("\nüéØ –õ—É—á—à–∏–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞:")
            for t in next_targets:
                print(f" -> {tuple(t)}")

            print("\nüìä –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
            print_board(heatmap)
            print("\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
